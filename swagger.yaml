# swagger.yaml
openapi: 3.0.0
info:
  title: Cloud Course API
  version: 1.0.0
  description: An API for Applied Computing Innovative solution project
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, for documentation purposes

tags:
  - name: Auth
    description: Authentication of User
  - name: Aircraft
    description: Aircraft management
  - name: Route
    description: Create Route for each Aircraft
  - name: Static
    description: Initialise the app with data


paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Signing up the user
      description: Adds a user to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - password
                - confirmedPassword
                - email
                - mobile
              properties:
                userName:
                  type: string
                password:
                  type: string
                confirmedPassword:
                  type: string
                email:
                  type: string
                mobile:
                  type: string
                agreedToTermAndCondition:
                  type: boolean
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  success:
                    type: boolean
        "400":
          description: Invalid input
        "409":
          description: User or password is incorrect
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                userName:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: |
            User Successfully logged
            In JWT   
            { isAuth: true,
              user: {
                userName: existingUser.userName,
                email: existingUser.email,
                _id: existingUser._id,
              }
               after in any path with authen, this is added in req.auth
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                  success:
                    type: boolean

        "400":
          description: Invalid input
        "409":
          description: User or password is incorrect
  /testAuth:
    get:
      tags:
        - Auth
      summary: test if authentication works
      security:
        - BearerAuth: []
      responses:
        "200":
          description: success
        "403":
          description: Unautheticated
  /aircrafts/new:
    post:
      security:
        - BearerAuth: []
      tags:
        - Aircraft
      description: Add Aircraft to the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aircraftType:
                  type: string
                aircraftRegistration:
                  type: string
                aircraftBuildDate:
                  type: string
                  format: date
                aircraftModel:
                  type: string
      responses:
        "200":
          description: Aircraft added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "400":
          description: Invalid input
        "409":
          description: User name does not exist
  /aircrafts/{aircraftId}:
    get:
      parameters:
        - in: path
          name: aircraftId
          required: true
          schema:
            type: string
            format: ObjectId
      tags:
        - Aircraft
      summary: Get one Aircraft, must belong to the user, userId already in JWT attached to the header
      security:
        - BearerAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  aircraftType:
                    type: string
                  aircraftRegistration:
                    type: string
                  aircraftBuildDate:
                    type: string
                    format: date
                  aircraftModel:
                    type: string
        "403":
          description: Unauthenticated
  /aircrafts/all:
    get:
      tags:
        - Aircraft
      summary: Get all Aircraft from 
      security:
        - BearerAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  aircrafts: 
                    type: array
                    items:
                     type: object
                     properties:
                      aircraftType:
                        type: string
                      aircraftRegistration:
                        type: string
                      aircraftBuildDate:
                        type: string
                        format: date
                      aircraftModel:
                        type: string
        "403":
          description: Unauthenticated
  /static/fetchAllAirports:
      get:
        tags:
          - Static
        summary: Fetch all airport from RapidAPI and store it to the database
        responses:
          "200":
            description: No data existed yet and data is added to database
          "400":
            description: Data already existed
  /route/new:
    post: 
      security:
        - BearerAuth: []
      tags:
        - Route
      description: Add Route to the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                departingAirport:
                  type: string
                  format: ICAO or YATA code
                arrivingAirport:
                  type: string
                  format: ICAO or YATA code
                waypoints:
                  type: array
                  items:
                    type: object
                    properties:
                      longitude:
                        type: number
                      latitude: 
                        type: number
                departingDate:
                  type: string
                  format: date
                arrivingDate:
                  type: string
                  format: date
                aircraftId:
                  type: string
                  format: ObjectId
      responses:
        "200":
          description: Route added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
